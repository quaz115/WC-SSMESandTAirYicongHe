#!/bin/csh -f

setenv START_OF_COMPILE "`date`"

# PROCESS OPTIONs:
# =======================================================================
# TARGET AND EXE LISTs:
set EXELIST = ""
set TARLIST = ""

# COUNTER AND INDEX:
set CTR = 0; set DEX = 0

# LOOP OVER EACH OPTION:
foreach arg ( $argv )
    @ CTR ++ 

    # OPTION:
    if ( "$arg" == "-h" ) goto help

    # OPTION:
    if ( "$arg" == "-j" ) then 
	@ DEX = $CTR + 1; setenv J "-j $argv[$DEX]"
    endif

    # OPTION:
    if ( "$arg" == "em_real" ) then
	set TARLIST = ( $TARLIST "em_real" )
	set EXELIST = ( main/wrf.exe main/real.exe main/ndown.exe main/tc.exe ) 
    endif
end

# CHECK FOR STOPs:
# =======================================================================
# CHECK:
if ( ! -e configure.wrf ) then
    echo "CONFIG. FILE DOES NOT EXIST; STOP."; exit 1
endif

# CHECK:
if ( ! $?J ) then 
    echo "-j OPTION NOT SPECIFIED; STOP."; exit 1
endif

# CHECK:
if ( "$TARLIST" == "" ) then 
    echo "MAKE TARGET(s) NOT SPECIFIED; STOP."; exit 1
endif

# RUN KPP:
# =======================================================================
if ( ! $?WRF_KPP ) setenv WRF_KPP 0

if ( $WRF_KPP == 1 ) then
    printf "\n\e[1;33m%s\e[0m\n\n" "running... KPP"; chem/KPP/compile_wkc 
endif

#
# =======================================================================
if ( $?WRF_NMM_CORE ) then
    if ( $WRF_NMM_CORE == 1 ) then
        setenv WRF_NMM_NEST 1
    endif
endif

setenv A2DCASE `echo $TARLIST | grep 2d`
setenv A1DCASE `echo $TARLIST | grep scm`

if ( ! ( $?WRF_EM_CORE || $?WRF_NMM_CORE || \
         $?WRF_COAMPS_CORE || $?WRF_EXP_CORE || \
         $?WRF_PLUS_CORE )) then 

    setenv WRF_EM_CORE 1
    setenv WRF_NMM_CORE 0
    setenv WRF_COAMPS_CORE 0
    setenv WRF_EXP_CORE 0
    setenv WRF_PLUS_CORE 0

endif

if ( ! $?WRF_HYDRO ) then
    setenv WRF_HYDRO  0
    setenv LIB_WRF_HYDRO ""
else
if($WRF_HYDRO == 1) then
    setenv LIB_WRF_HYDRO "-L../hydro/lib -lHYDRO"
else
    setenv LIB_WRF_HYDRO ""
endif
endif

if ( ! $?WRF_DA_CORE )     setenv WRF_DA_CORE 0
if ( ! $?WRF_EM_CORE )     setenv WRF_EM_CORE 0
if ( ! $?WRF_NMM_CORE )    setenv WRF_NMM_CORE 0
if ( ! $?WRF_NMM_NEST )    setenv WRF_NMM_NEST 0
if ( ! $?WRF_COAMPS_CORE ) setenv WRF_COAMPS_CORE 0
if ( ! $?WRF_EXP_CORE )    setenv WRF_EXP_CORE 0
if ( ! $?WRF_PLUS_CORE )   setenv WRF_PLUS_CORE 0
if ( ! $?WRF_CHEM )        setenv WRF_CHEM 0
if ( ! $?WRF_DFI_RADAR )   setenv WRF_DFI_RADAR 0
if ( ! $?HWRF )            setenv HWRF 0

if ( ! $?WRF_CONVERT ) then
if ( "$TARLIST" == "convert_em" ) then
    setenv WRF_CONVERT 1
    setenv WRF_EM_CORE 0
else
    setenv WRF_CONVERT 0
endif
endif

if ( ! $?DA_ARCHFLAGS ) setenv DA_ARCHFLAGS ""

if ( ( $WRF_CHEM == 1 ) && ( $WRF_DA_CORE == 1 ) ) then
    echo "  "
    echo "WRFDA can not be compiled with WRF_CHEM=1"
    echo "unset the WRF_CHEM env variable."
    echo "  "
    exit
endif

if ( ( $WRF_DA_CORE == 1 ) && ( ! -d var ) ) then
    echo "  "
    echo "You need to download and untar the Var code, or"
    echo "unset the WRF_DA_CORE env variable."
    echo "  "
    exit
endif

if ( ( $WRF_CHEM == 1 )  && ( ! -d chem ) ) then
    echo "  "
    echo "You need to download and untar the chem code, or"
    echo "unset the WRF_CHEM env variable."
    echo "  "
    exit
endif

set overwrite = 0

if ( $WRF_NMM_CORE == 1 && $WRF_DFI_RADAR == 1 ) then
    echo "radar dfi not yet supported in NMM core, set WRF_DFI_RADAR to 0 "
endif


# UPDATE REGISTRY:
# =======================================================================
if ( $WRF_NMM_CORE == 1 && $WRF_CHEM == 1 ) then

    echo "Chemistry not yet supported in NMM core, set WRF_CHEM to 0 "

    if ( ! -f Registry/Registry ) then
	echo Registry file does not exist
	set overwrite = 1
    else
	head -2 Registry/Registry | tail -1 | grep NMM_CHEM > /dev/null
	if ( $status ) then
	    set overwrite=1
	else 
	    set nmm_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.NMM_CHEM' | grep -v 'Registry.NMM_CHEM.' | awk '{print $1}'`
	    set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
	    if ( $nmm_time > $rg_time ) set overwrite=1

	endif
    endif
    
    if ( $overwrite ) then
	echo copying Registry/Registry.NMM_CHEM to Registry/Registry
	echo '## WARNING: this file is autogenerated from Registry/Registry.NMM_CHEM. Changes may be lost' > Registry/Registry
	/bin/cat Registry/Registry.NMM_CHEM >> Registry/Registry
    endif
endif


if ($WRF_EM_CORE == 1 && $WRF_NMM_CORE == 1 ) then
    echo "Cannot compile both EM and NMM cores in same executable yet."
    exit 2
endif


if ($WRF_EM_CORE == 0 && $WRF_NMM_CORE == 0 && ! $WRF_CONVERT == 1 ) then
    echo "Cannot compile because both EM and NMM cores are set to 0."
    exit 2
endif


if ("$TARLIST" == 'nmm_real' && $WRF_NMM_CORE == 0) then
    echo "WRF_NMM_CORE must be set to 1 in order to compile nmm_real"
    exit 2
endif


if ( ($WRF_EM_CORE == 1) && ($WRF_DA_CORE == 0 ) && ($WRF_CHEM == 0 ) && \
     ($WRF_CONVERT == 0) && ($WRF_PLUS_CORE == 0) )  then

    if ( ! -f Registry/Registry ) then
      set overwrite = 1
    else
      head -2 Registry/Registry | tail -1 | grep EM > /dev/null
      if ( $status ) then
        set overwrite = 1
      else
        set em_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.EM' | grep -v 'Registry.EM.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $em_time > $rg_time ) set overwrite=1
      endif
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.EM to Registry/Registry
      echo '## WARNING: this file is autogenerated from Registry/Registry.EM. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.EM >> Registry/Registry
    endif

else if ( ($WRF_EM_CORE == 1)&&($WRF_PLUS_CORE == 1) )  then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    else
      head -2 Registry/Registry | tail -1 | grep WRFPLUS > /dev/null
      if ( $status ) then
        set overwrite=1
      else
        set em_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.tladj' | grep -v 'Registry.tladj.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $em_time > $rg_time ) set overwrite=1
      endif
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.tladj to Registry/Registry
      echo '## WARNING: this file is autogenerated from Registry/Registry.tladj. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.tladj >> Registry/Registry
    endif

else if (($WRF_EM_CORE == 1)&&($WRF_CHEM == 1 ))  then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    else
      head -2 Registry/Registry | tail -1 | grep EM_CHEM > /dev/null
      if ( $status ) then
        set overwrite=1
      else
        set em_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.EM_CHEM' | grep -v 'Registry.EM_CHEM.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $em_time > $rg_time ) set overwrite=1
      endif
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.EM_CHEM to Registry/Registry
      echo '## WARNING: this file is autogenerated from Registry/Registry.EM_CHEM. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.EM_CHEM >> Registry/Registry
    endif

else if (($WRF_EM_CORE == 1)&&($WRF_DFI_RADAR == 1 ))  then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.EM to Registry/Registry
      echo '## WARNING: this file is autogenerated from Registry/Registry.EM. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.EM >> Registry/Registry
    endif

else if (($WRF_EM_CORE == 0)&&($WRF_CONVERT == 1 ))  then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    else
      head -2 Registry/Registry | tail -1 | grep EM_CONVERT > /dev/null
      if ( $status ) then
        set overwrite=1
      else
        set em_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.EM_CONVERT' | grep -v 'Registry.EM_CONVERT.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $em_time > $rg_time ) set overwrite=1
      endif
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.CONVERT to Registry/Registry
      echo '## WARNING: this file is autogenerated from Registry/Registry.CONVERT. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.CONVERT >> Registry/Registry
    endif

else if ( $WRF_DA_CORE == 1 )  then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    else
      head -2 Registry/Registry | tail -1 | grep WRFVAR > /dev/null
      if ( $status ) then
        set overwrite=1
      else
        set nmm_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.NMM' | grep -v 'Registry.NMM.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $nmm_time > $rg_time ) set overwrite=1
      endif
    endif

    if ( $overwrite ) then
      echo copying Registry/Registry.wrfvar to Registry/Registry
      /bin/rm -f Registry/Registry.rconfig
      /bin/cat Registry/Registry.EM_COMMON | grep '^rconfig' > Registry/Registry.rconfig
      echo '## WARNING: this file is autogenerated from Registry/Registry.wrfvar Registry/Registry.EM_COMMON.var. Changes may be lost' > Registry/Registry
      /bin/cat Registry/Registry.wrfvar >> Registry/Registry
    endif

    set wrfpluspath = ( `grep "^WRFPLUSPATH" configure.wrf | cut -d"=" -f2-` )

    if ( $wrfpluspath == "" ) then
       setenv WRFPLUS_INC " "
    else
       setenv WRFPLUS_DIR $wrfpluspath
       setenv WRFPLUS_INC "-I${wrfpluspath}/dyn_em -I${wrfpluspath}/main -I${wrfpluspath}/frame -I${wrfpluspath}/share -I${wrfpluspath}/wrftladj"
    endif

    setenv BUFR 1
    set CRTM = ( `grep "\-DCRTM" configure.wrf | sed -e 's/\\//g' | sed 's/-//g' ` )
    if ( $CRTM != "" ) then
       echo "  "
       echo "Will compile with CRTM library"
       echo "  "
       if ( ! $?BUFR ) then
          echo "  "
          echo "BUFR library is needed for radiance data ingest."
          echo "setting BUFR=1"
          echo "  "
          setenv BUFR 1
       endif
       setenv CRTM_CPP "-DCRTM"
       setenv CRTM_LIB "-L../external/crtm_2.3.0/libsrc -lCRTM"
       setenv CRTM_SRC "-I../external/crtm_2.3.0/libsrc"
       #setenv SFC_CRTM `grep '^SFC' configure.wrf | awk '{print $3}' | sed -e 's/\// /g' | awk '{print $NF}'`
       #setenv ABI_CRTM `grep '^SFC' configure.wrf | sed -n 's/.*\(\-m[0-9]\{2\}\).*/\1/p'`
       setenv CRTM 1
    else
       echo "  "
       echo "Compiling WRFDA without CRTM library"
       echo "  "
       setenv CRTM_CPP " "
       setenv CRTM_LIB " "
       setenv CRTM_SRC " "
       setenv CRTM 0
    endif

    set hdf5path = ( `grep "^HDF5PATH" configure.wrf | cut -d"=" -f2-` )

    if ( $hdf5path == "" ) then
       setenv HDF5_INC ""
       unsetenv HDF5
    else
       echo "  "
       echo "Compiling with HDF5 libraries in:"
       echo $hdf5path
       echo "  "
       setenv HDF5_INC "-I${hdf5path}/include"
       setenv HDF5 1
    endif

    set RTTOV = ( `grep "^RTTOVPATH" configure.wrf | cut -d"=" -f2-` )

    if ( $RTTOV == "" ) then
       setenv RTTOV_LIB " "
       setenv RTTOV_SRC " "
       unsetenv RTTOV
    else
       if ( $hdf5path == "" ) then
          echo "As of version 12.1 of RTTOV, WRFDA requires HDF5 in order utilize the RTTOV library."
          echo "RTTOV emissivity atlas files are now provided only in HDF5 format."
          echo "Please supply an HDF5 path prior to configure or unset RTTOV."
          exit 1
       else
          echo "  "
          echo "Compiling with RTTOV libraries in:"
          echo $RTTOV
          echo "  "
          if ( ! $?BUFR ) then
             echo "  "
             echo "BUFR library is needed for radiance data ingest."
             echo "setting BUFR=1"
             echo "  "
             setenv BUFR 1
          endif
          if ( -e ${RTTOV}/lib/librttov12_main.a ) then
             setenv RTTOV_LIB "-L${hdf5path}/lib -lhdf5hl_fortran -lhdf5_hl -lhdf5_fortran -lhdf5 -L${RTTOV}/lib -lrttov12_coef_io -lrttov12_emis_atlas -lrttov12_main -lrttov12_hdf"
          else
             echo "Can not find a compatible RTTOV library! Please ensure that your RTTOV build was successful,"
             echo "your 'RTTOV' environment variable is set correctly, and you are using a supported version of RTTOV."
             echo "Current supported version(s): 12.1"

             exit 1
          endif
          setenv RTTOV_SRC "-I${RTTOV}/include -I${RTTOV}/mod"
       endif
    endif

    if ( $?CLOUD_CV ) then
       setenv CLOUD_CV_CPP "-DCLOUD_CV"
    else
       setenv CLOUD_CV_CPP " "
    endif

    if ( $?BUFR ) then
       setenv BUFR_CPP "-DBUFR"
       setenv BUFR_LIB "-L../external/bufr -lbufr"
    else
       setenv BUFR_CPP " "
       setenv BUFR_LIB " "
    endif


    if ( $?WAVELET ) then
       setenv WAVELET_LIB "../external/wavelet/libWavelet.a ../external/wavelet/lib_wavelet.a"
    else
       setenv WAVELET_LIB " "
    endif


    if ( $?MADIS ) then
       setenv MADIS_CPP "-DMADIS"
       setenv MADIS_STATIC ${MADIS}/static
       setenv MADIS_LIB "-L${MADIS} -lmadis"
    else
       setenv MADIS_CPP " "
       setenv MADIS_LIB " "
    endif

    setenv DA_ARCHFLAGS "${BUFR_CPP} ${MADIS_CPP} -DFFTPACK -DNORESHAPE"


endif


if (($WRF_NMM_CORE == 1)&&($WRF_CHEM == 0 )) then

    if ( ! -f Registry/Registry ) then
      set overwrite=1
    else
      head -2 Registry/Registry | tail -1 | grep NMM > /dev/null
      if ( $status ) then
        set overwrite=1
      else
        set nmm_time=`ls -1tr Registry | cat -n | grep -w 'Registry\.NMM' | grep -v 'Registry.NMM.' | awk '{print $1}'`
        set rg_time=`ls -1tr Registry | cat -n | grep -w 'Registry' | grep -v 'Registry.' | awk '{print $1}'`
        if ( $nmm_time > $rg_time ) set overwrite=1
      endif
    endif


    if ( $overwrite ) then
       echo copying Registry/Registry.NMM to Registry/Registry
       echo '## WARNING: this file is autogenerated from Registry/Registry.NMM. Changes may be lost' > Registry/Registry
       /bin/cat Registry/Registry.NMM >> Registry/Registry
    endif


# integrity check for a kludge where a hard coded value in the 
# registry must match the same value in arch/preamble
    set registryvalue=`grep 'dimspec.* q ' Registry/registry.dimspec | sed -e 's/..*constant=//' -e 's/ ..*$//'`
    set preamblevalue=`grep 'DNMM_MAX_DIM=.*' arch/preamble | sed -e 's/..*-DNMM_MAX_DIM=//' -e 's/ ..*$//'`

    if ( $registryvalue != $preamblevalue ) then
      echo "Harded coded value of dimspec q in Registry ($registryvalue) does not"
      echo "equal the hard coded value of NMM_MAX_DIM in arch/preamble ($preamblevalue)"
      echo "Please fix and try again."
      exit 2

    endif
endif


if ( ! $?WRF_SRC_ROOT_DIR ) setenv WRF_SRC_ROOT_DIR `pwd`

# CHECK PARALLEL MAKE:
# =======================================================================
# TEST:
make -j 2 >& /dev/null

# NO PARALLEL MAKE:
if ( ! $status == 0 ) then
    echo "NO PARALLEL MAKE AVAILABLE. SETTING -j 1."; setenv J "-j 1"
endif

# MAKE THE WRF-CHEM MODEL:
# =======================================================================
/bin/rm -f $EXELIST >& /dev/null; make $TARLIST; exit 0

# HELP SECTION:
# =======================================================================
help:

echo ' '
echo 'Usage:'
echo ' '
echo '   compile [-j n] wrf   compile wrf in run dir (NOTE: no real.exe, ndown.exe, or ideal.exe generated)'
echo ' '
echo '   or choose a test case (see README_test_cases for details) :'
foreach d ( `/bin/ls test` )
  if ( "$d" != "CVS" ) then
    echo "      compile [-j n] $d"
  endif
end
echo ' '
echo '  compile -j n               parallel make using n tasks if supported (default 2)'
echo '  compile -h                 help message'


